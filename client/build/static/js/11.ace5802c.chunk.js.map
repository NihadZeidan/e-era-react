{"version":3,"sources":["redux/shop/shop.actions.js","pages/shopPage/shopPage.component.js"],"names":["fetchCollectionsAsync","dispatch","collectionsRef","firestore","collection","type","ShopActionType","FETCH_COLLECTIONS_START","get","then","snapshot","collectionsMap","mapCollections","convertCollectionsSnapshotToMap","FETCH_COLLECTIONS_SUCCESS","payload","catch","error","errorMessage","message","FETCH_COLLECTIONS_FALURE","CollectionsOverviewContainer","lazy","CollectionPreviewContainer","ShopPage","match","useDispatch","useEffect","className","fallback","exact","path","component"],"mappings":"mLA0BaA,EAAwB,WACnC,OAAO,SAACC,GAEN,IAAMC,EAAiBC,IAAUC,WAAW,eAC5CH,EAvBK,CACLI,KAAMC,IAAeC,0BAyBrBL,EACGM,MACAC,MAAK,SAACC,GACL,IAxBgCC,EAwB1BC,EAAiBC,YAAgCH,GAEvDT,GA1BgCU,EA0BCC,EAzBhC,CACLP,KAAMC,IAAeQ,0BACrBC,QAASJ,QAyBNK,OAAM,SAACC,GAAD,OAAWhB,GArBeiB,EAqBiBD,EAAME,QApBrD,CACLd,KAAMC,IAAec,yBACrBL,QAASG,KAHyB,IAACA,O,yCCVjCG,EAA+BC,gBAAK,kBACxC,iCAEIC,EAA6BD,gBAAK,kBACtC,iCA6BaE,UA1Bf,YAA8B,IAAVC,EAAS,EAATA,MACZxB,EAAWyB,cAMjB,OAJAC,qBAAU,WACR1B,EAASD,OACR,IAGD,qBAAK4B,UAAU,YAAf,SACE,cAAC,IAAD,UACE,eAAC,WAAD,CAAUC,SAAU,cAAC,IAAD,IAApB,UACE,cAAC,IAAD,CACEC,OAAK,EACLC,KAAI,UAAKN,EAAMM,MACfC,UAAWX,IAEb,cAAC,IAAD,CACEU,KAAI,UAAKN,EAAMM,KAAX,gBACJC,UAAWT","file":"static/js/11.ace5802c.chunk.js","sourcesContent":["import ShopActionType from \"./shop.types\";\nimport {\n  firestore,\n  convertCollectionsSnapshotToMap,\n} from \"../../firebase/firebase.utils\";\n\nexport const fetchCollectionsStart = () => {\n  return {\n    type: ShopActionType.FETCH_COLLECTIONS_START,\n  };\n};\n\nexport const fetchCollectionsSuccess = (collectionsMap) => {\n  return {\n    type: ShopActionType.FETCH_COLLECTIONS_SUCCESS,\n    payload: collectionsMap,\n  };\n};\n\nexport const fetchCollectionsFalure = (errorMessage) => {\n  return {\n    type: ShopActionType.FETCH_COLLECTIONS_FALURE,\n    payload: errorMessage,\n  };\n};\n\nexport const fetchCollectionsAsync = () => {\n  return (dispatch) => {\n    // getting collectionsRef from firestore\n    const collectionsRef = firestore.collection(\"collections\");\n    dispatch(fetchCollectionsStart());\n    // This is a promise pattern\n    // once the component did mount we want to get the data and modify it.\n    collectionsRef\n      .get()\n      .then((snapshot) => {\n        const mapCollections = convertCollectionsSnapshotToMap(snapshot);\n\n        dispatch(fetchCollectionsSuccess(mapCollections));\n      })\n      .catch((error) => dispatch(fetchCollectionsFalure(error.message)));\n  };\n};\n","import { useEffect, lazy, Suspense } from \"react\";\nimport { Route } from \"react-router-dom\";\nimport { fetchCollectionsAsync } from \"../../redux/shop/shop.actions\";\nimport { useDispatch } from \"react-redux\";\nimport Spinner from \"../../components/spinner/spinner.component\";\nimport ErrorBoundary from \"../../components/error-boundary/error-boundary.component\";\n\nimport \"./shopPage.styles.scss\";\n\nconst CollectionsOverviewContainer = lazy(() =>\n  import(\"../../components/collection-overview/collectionOverView.container\")\n);\nconst CollectionPreviewContainer = lazy(() =>\n  import(\"../collectionPage/collection.container\")\n);\n\nfunction ShopPage({ match }) {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchCollectionsAsync());\n  }, []);\n\n  return (\n    <div className=\"shop-page\">\n      <ErrorBoundary>\n        <Suspense fallback={<Spinner />}>\n          <Route\n            exact\n            path={`${match.path}`}\n            component={CollectionsOverviewContainer}\n          />\n          <Route\n            path={`${match.path}/:collection`}\n            component={CollectionPreviewContainer}\n          />\n        </Suspense>\n      </ErrorBoundary>\n    </div>\n  );\n}\n\nexport default ShopPage;\n"],"sourceRoot":""}